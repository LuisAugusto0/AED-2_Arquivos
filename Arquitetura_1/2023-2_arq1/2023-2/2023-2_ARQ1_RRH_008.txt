PUC-Minas - ICEI - Ciência da Computação
Arquitetura de Computadores I - Aula 2023-2_008
Anotações
___

Resumo da semana

Revisão

Operações aritméticas (ULA)

Considerar, para mintermos:     De outra forma, com MAXTERMOS:
                                  
a  = 1 = true                   A  = 0 = false
a' = 0 = false                  A' = 1 = true
                                  
a and b = a & b = a.b           A and B = A & B = A.B
a or  b = a | b = a+b           A or  B = A | B = A+B
                           

Unidade Lógica e Aritmética (ULA)

Somadores e subtratores

01. Somador

a.) Somador de dois bits 
   ("meia-soma" ou "meio-somador" ou "half-adder")

    v0  
     0 a +
     0 b
    ______
     v r   
                           soma     v  r
m mintermos MAXTERMOS  a b (a+b) = s1 s0
0  (a'.b')   (A +B )   0 0  0+0  =  0  0
1  (a'.b )   (A +B')   0 1  0+1  =  0  1
2  (a .b')   (A'+B )   1 0  1+0  =  0  1
3  (a .b )   (A'+B')   1 1  1+1  =  1  0

___

Forma normal canônica disjuntiva (cDNF)
(saídas definidas por linhas com mintermos iguais a um)

Soma de Produtos ( SoP )
                                                  3
s1 = f1 (a, b) = 1 = m(3)        = m  { 3 }  =   a.b
                                                 1   2
s0 = f0 (a, b) = 1 = m(1) + m(2) = m { 1,2 } = a'.b+a.b'

Expressões com as saídas definidas por mintermos:

s1 =    a . b    = a & b = a and b
s0 = a'.b + a.b' = a ^ b = a xor b (não é canônica!)

Notações semelhantes

s1 = f1 (a, b) = a & b =      a.b      = a and b = and (a, b)
s0 = f0 (a, b) = a ^ b = (a'.b + a.b') = a xor b = xor (a, b)

Equações características

  Forma completa (ou canônica):
  s1 = v =     a.b     (v -> "vai-um" )
  s0 = r = a'.b + a.b' (r -> resultado)

  Forma compacta (soma de produtos):
  s1 = v = SoP (3)
  s0 = r = SoP (1,2)

___
  
Verilog

// definicao por expressao
module HA_e ( output s1, output s0, input a, input b );
  assign s0 = a ^ b; // a xor b
  assign s1 = a & b; // a and b
endmodule

// definicao por portas (gates)
module HA_p ( output s1, output s0, input a, input b );
  xor XOR_1 ( s0, a, b );
  and AND_1 ( s1, a, b );
endmodule

___

Forma normal canônica conjuntiva (cCNF)
(saídas definidas por linhas com MAXTERMOS iguais a zero)

Considerar os termos na tabela com valor igual a 0

Produto de Somas ( PoS )
                                           0      1       2
S1 = F1 (A, B) = 0 = MAXTERMOS {0,1,2} = (A+B).(A +B').(A'+B)
                                           0      3
S0 = F0 (A, B) = 0 = MAXTERMOS {0 , 3} = (A+B).(A'+B')

___

Para S1:

A+B  .
A+B'
_________________
      A.B'+B.B' +         // contradição
A.A + A.B                 // idempotência
_________________
      A.B'+  0  +         // contradição
A.1 + A.B                 // identidade
____________________
A.1 + A.B + A.B'          // distributiva
____________________
A.(1 + B + B' )           // tautologia
A.     1                  // identidade
 A

A    .
A'+B
_________
A.A'+A.B                  // contradição
 0  +A.B                  // identidade
     A.B

S1 = A.B

___

Para S0:     

A +B .
A'+B'
__________________
   A.B'+B.B'+              // contradição 
A.A'+A'.B                  // contradição 
___________________
   A.B'+ 0  +              // identidade 
 0  +A'.B                  // identidade 
___________________
   A.B'+A'.B               // comutativa
   A'.B+A.B'

S0 = A'.B+A.B'   

Resumo

S1 = A.B
S0 = A'.B+A.B'

________________________________________________________________


b.) Somador de três bits 
   ("somador completo em cascata" ou "ripple-carry adder")

                                SoP SoP               SoP SoP
m mintermos  MAXTERMOS   a b c   s1  s0      m a b c   s1  s0
0 (a'.b'.c') (A +B +C )  0 0 0 = 0   0       0 0+0+0 = 0   0
1 (a'.b'.c ) (A +B +C')  0 0 1 = 0   1       1 0+0+1 = 0   1
2 (a'.b .c') (A +B'+C )  0 1 0 = 0   1       2 0+1+0 = 0   1
3 (a'.b .c ) (A +B'+C')  0 1 1 = 1   0       3 0+1+1 = 1   0

4 (a .b'.c') (A'+B +C )  1 0 0 = 0   1       4 1+0+0 = 0   1
5 (a .b'.c ) (A'+B +C')  1 0 1 = 1   0       5 1+0+1 = 1   0
6 (a .b .c') (A'+B'+C )  1 1 0 = 1   0       6 1+1+0 = 1   0
7 (a .b .c ) (A'+B'+C')  1 1 1 = 1   1       7 1+1+1 = 1   1

           Soma de Produtos (1)           Produto de Somas (0)

  s1 = v = 1 -> { 3,5,6,7 }      S1 = V = 0 -> { 0,1,2,4 }
  s0 = r = 1 -> { 1,2,4,7 }      S0 = R = 0 -> { 0,3,5,6 }

___

  Equações características para mintermos

  Forma compacta (soma de produtos):
  v = SoP (3,5,6,7)
  r = SoP (1,2,4,7)

  Forma completa (ou canônica):
  
         (3)      (5)        (6)       (7)
  v = a'.b .c + a .b'.c  + a.b .c' + a .b .c
         (1)      (2)        (4)       (7)
  r = a'.b'.c + a'.b .c' + a.b'.c' + a .b .c

  Observações:
              __________        __________
             |          |      |          |      // em evidência
  v =  a'.b .c  + a .b'.c  + a .b .c' + a .b .c
    = (a'.b     + a.b').c  +     (a.b).(c'+c)
    = (a'.b+a.b').c        + (a.b).(c'+c)        // tautologia
    =    (a^b)   .c        + (a.b).   1          // identidade
    =    (a^b)   .c        + (a.b)


distributiva    
             ______________________________
            |          _________           |
            |         |         |          |     
  r = a'.b'.c + a'.b .c' + a.b'.c' + a .b .c
    = a'.b'.c +  (a'.b + a.b').c'  + a .b .c
    = (a'.b'+a.b).c  +  (a'.b+a.b').c'
    =  (a xnor b).c  +    (a xor b).c'
    =  (a^b)'.c      +    (a^b).c'

  OBS.:
    a xor  b = (a'.b+a.b') = m {1,2} = (a^b)
    a xnor b = (a'.b'+a.b) = m {0,3} = (a^b)'

    se fizer (a^b) = k e substituir 

  r =    k'.c        +      k.c'
  r =               k^c

    e se retornar o valor substituído

  r = (a^b)^c

    logo

  v = (a^b).c + (a.b)
  r = (a^b)^c

___

  Equações características para MAXTERMOS

  Forma compacta (produto de somas):
  V  = PoS {0,1,2,4}
  R  = PoS {0,3,5,6}

  Forma completa (ou canônica):
         (0)        (1)         (2)          (4)
  V =  (A+B+C) . (A+B +C') . (A +B'+C ) . (A'+B +C)
         (0)        (3)         (5)          (6)
  R =  (A+B+C) . (A+B'+C') . (A'+B +C') . (A'+B'+C)

  Observações:
         __________________________________
        |  ______________________          |
        | |  __________          |         |
        | | |          |         |         |        // distribuição   
  V =  (A+B+C) . (A+B +C') . (A +B'+C ) . (A'+B +C)

com M {0,1} :

        A +B +C               (0)
    *   A +B +C'              (1)
    ____________________ 
        A.C'+B.C'+C.C'     -> C.C' = 0              // contradição
    +   A.B +B.B +B.C      -> B.B  = B = B.1        // idempotência/identidade
        A.A +A.B +A.C      -> A.A  = A = A.1        // idempotência/identidade
    ____________________ 
        A.C'+B.C'+ 0                                // identidade
    +   A.B +B.1 +B.C                               // identidade
        A.1 +B.A +A.C                               // identidade
    ____________________ 
        A.1 +A.C'+A.C                               // distributividade
    +   B.C'+B.1+B.C+B.A                            // distributividade
    ____________________ 
        A.(1+C'+C)         -> C'+C = 1              // tautologia/identidade
    +   B.(C'+1+C+A)       -> C'+C+1+A = 1          // tautologia/identidade
    ____________________
        A.( 1 )                                     // identidade
    +   B.( 1 )                                     // identidade 
    ____________________ 
        A + B              (parcial 1)

de outra forma

     ((A+B)+C).((A+B)+C')

     K = (A+B)

     (K+C).(K+C')

     (K.K + K.C') + (C.K + C.C')
 
     (K.1 + K.C') + (C.K +  0  )

      K.1 + K.C'  +  K.C 

      K.(1+   C'  +    C)

      K.1

      K

      substituindo novamente

      (A+B)

___
      
com M {0,2} :

        A +B +C               (0)
    *   A +B'+C               (2)
    ____________________ 
        A.C +B.C+ C .C     -> C.C  = C = C.1        // idempotência/identidade  
    +   A.B'+B.B'+B'.C     -> B.B' = 0              // contradição
        A.A +A.B +A .C     -> A.A  = A = A.1        // idempotência/identidade
    ____________________ 
        A.C +B.C+ C .1                              // identidade 
    +   A.B'+ 0 +B'.C                               // identidade  
        A.1 +B.A+A .C                               // identidade
    ____________________ 
       (A+B+1+B'+A).C                               // tautologia/identidade
    +  (B'+ 1   +B).A                               // tautologia/identidade
    ____________________ 
       (    1     ).C                               // identidade 
    +  (    1     ).A                               // identidade 
    ____________________ 
        A + C              -> (parcial 2 )

___

com M {0,4}:

        A +B +C               (0)
    *   A'+B +C               (4)
    ____________________ 
        A.C +B.C +C .C     -> C.C  = C = C.1        // idempotência/identidade
    +   A.B +B.B +B .C     -> B.B  = B = B.1        // idempotência/identidade
        A'.A+A'.B+A'.C     -> A.A' = 0              // contradição
    ____________________ 
        A.C +B.C +C .1                              // identidade
    +   A.B +B.1 +B .C                              // identidade
         0  +A'.B+A'.C                              // identidade
    ____________________ 
       (A+B+1+B+A') .C                              // tautologia/identidade
    +  (A+  1  +A') .B                              // tautologia/identidade
    ____________________
       (    1     ) .C                              // identidade
    +  (    1     ) .B                              // identidade
    ____________________ 
        B + C              -> (parcial 3)

___

   Ao juntar os resultados parciais se obterá 

     V = (A+B).(A+C).(B+C)

   Ao desenvolver,

     V = (A+B).(A+C)      .(B+C)

       = (A.A+B.A+A.C+B.C).(B+C)                     // distributiva
 
       = (A.1+A.B+A.C+B.C).(B+C)                     // identidade/comutativa

       = (A.(1+B+C)  +B.C).(B+C)                     // distributiva

       = (A.(  1  )  +B.C).(B+C)                     // identidade

       = (A          +B.C).(B+C)

       = A.(B+C)  +  (B.C).(B+C)                     // distributiva

       = A.B+A.C  + B.C.B+B.C.C                      // distributiva
  
       = A.B+A.C  + B.B.C+B.C.C                      // comutativa

       = A.B+A.C  +(B.C) +(B.C)                      // idempotência

       = A.B + A.C   +    B.C

   OBS.:
     Verificar que esse resultado não se parece
     com aquele obtido anteriormente por mintermos

     v = (a^b).c + (a.b)


   Entretanto,
   
     por inspeção, ao voltar à tabela-verdade,
     observa-se que, para mintermos,

 
  a b c  mintermos              s1 s0                      
0 0 0 0  (a'.b'.c') (A +B +C )   0  0                      
1 0 0 1  (a'.b'.c ) (A +B +C')   0  1                      
2 0 1 0  (a'.b .c') (A +B'+C )   0  1                      
3 0 1 1  (a'.b .c ) (A +B'+C')   1  0  --             (b.c)
4 1 0 0  (a .b'.c') (A'+B +C )   0  1                      
5 1 0 1  (a .b'.c ) (A'+B +C')   1  0  --       (a.c)      
6 1 1 0  (a .b .c') (A'+B'+C )   1  0  -- (a.b)            
7 1 1 1  (a .b .c ) (A'+B'+C')   1  1  -- (a.b) (a.c) (b.c)
  A B C              MAXTERMOS                             

     semelhante à expressão original, logo,
     há outra forma de arranjar os termos,
     que leva à equação encontrada acima 
 
         (3)        (5)        (6)        (7)
  v =  a'.b .c  + a .b'.c  + a .b .c' + a .b .c
            |        |         |__________||  |
            |        |_____________________|  |                 
            |_________________________________|
        
    =  (a.b).(c'+c) + (a.c).(b'+b) + (a'+a).(b.c)  

    =  (a.b).(  1 ) + (a.c).(  1 ) + (  1 ).(b.c)

    =  (a.b)        + (a.c)        +        (b.c)

___
    
  Para a outra expressão:        
             ____________________________________  
            |                                    | 
  R =  (A+B+C) . (A+B'+C') . (A'+B +C') . (A'+B'+C)
                       |____________|
  
        A +B +C               (0)
    *   A'+B'+C               (6)
    ____________________ 
        A.C +B .C +C. C    -> C.C  = C = C.1
    +   A.B'+B .B'+C. B'   -> B.B' = 0
        A'.A+A'.B +A'.C    -> A.A' = 0
    ____________________
        A.C +B .C +C. 1  
    +   A.B'+  0  +C. B'
         0  +A'.B +A'.C  
    ____________________ 
        A.C +B .C +C. 1  
    +   A'.C+      C. B' 
        A.B'+A'.B        
    ____________________ 
       (A+B+1+A'+B'). C  
    +   A.B'+A'.B        
    ____________________ 
       (    1      ). C  
    +   A.B'+A'.B        
    ____________________ 
        A.B'+A'.B   + C       (parcial 1)

___

        A +B'+C'              (3)
    *   A'+B +C'              (5)
    ____________________
        A.C'+B'.C'+C'.C'   -> C'.C' = C' = C'.1
    +   A.B +B'.B +C'.B    -> B'.B  = 0
        A.A'+B'.A'+C'.A'   -> A.A'  = 0
    ____________________ 
        A.C'+B'.C'+1 .C' 
    +   A.B +  0  +B'.C' 
         0  +A.B' +A'.C' 
    ____________________ 
        A.C'+B'.C'+1 .C'
    +   A'.C'     +B'.C' 
        A.B +B'.A' 
    ____________________ 
       (A+B'+1+A'+B').C'  
    +   A.B +A'.B'        
    ____________________ 
       (    1      ). C'
    +   A.B +A'.B'        
    ____________________
        A.B +A'.B'  + C'      (parcial 2)


        A.B'+A'.B   + C       (parcial 1)
        A.B +A'.B'  + C'      (parcial 2)
    _________________________________
        A.B'.C'+A'.B.C'+C.C'         
    +   A.B'.A'.B'+A'.B.A'.B'+A'.B'.C
        A.B'.A.B+A'.B.A.B+A.B.C      
    _________________________________
        A.B'.C'+A'.B.C'+ 0         
    +   A.A'.B'.B'+A'.A'.B.B'+A'.B'.C
        A.A.B'.B+A'.A.B.B+A.B.C      
    _________________________________
        A.B'.C'+A'.B.C'+ 0           
    +    0  .B'   +A'  .  0  +A'.B'.C      
        A.    0 +  0 .B  +A. B .C      
    _________________________________
       (A.B'   +A'.B).C'      -> (A .B'+A'.B) = (A xor  B)       
    +  (A'.B'  + A.B).C       -> (A'.B'+A .B) = (A xnor B)
    _________________________________
       (   A xor  B ).C'
    +  (   A xnor B ).C       -> (A xnor B)   = (A xor  B)'
    _________________________________
       (   A xor  B ) .C'                        
    +  (   A xor  B )'.C      -> (A xor B)    = K
    _________________________________
                    K .C'                        
    +               K'.C      -> (K.C'+K'.C)  = (K xor C)
    _________________________________
           K xor  C           ->  K = (A xor B) 

       (A xor B) xor  C       

  OBS.:
    Verificar que a expressão acima é similar 
    àquela obtida anteriormente para mintermos:

    r = a^b^c   <=>   R = (A xor B) xor C

___
    
Verilog

// definicao por expressao
module FA_e ( output s1, output s0, input a, input b, input c );
  assign s1 = (a ^ b) & c + (a & b);
  assign s0 = (a ^ b) ^ c;
endmodule

// definicao por portas (gates)
module FA_p ( output s1, output s0, input a, input b, input c );
  wire w1, w2, w3;
  xor XOR_1 ( w1, a ,  b );
  xor XOR_2 ( s0, w1,  c );
  and AND_1 ( w2, w1,  c );
  and AND_2 ( w3, a ,  b );
  and OR__1 ( s1, w2, w3 );
endmodule

___

Somador completo como a combinação de duas "meias-somas"

s1a = 0 0 1 1
s1b = 0 1 0 1
      0 1 1 _  OBS.: Não ocorrerá dois (2) "vai-uns" 
                     na soma de três (3) bits.
      
                s1a          s1b
m a b c   a b    vr    r c    vr
0 0 0 0  (0+0) = 00   (0+0) = 00
1 0 0 1  (0+0) = 00   (0+1) = 01
2 0 1 0  (0+1) = 01   (1+0) = 01
3 0 1 1  (0+1) = 01   (1+1) = 10
4 1 0 0  (1+0) = 01   (1+0) = 01
5 1 0 1  (1+0) = 01   (1+1) = 10
6 1 1 0  (1+1) = 10   (0+0) = 00
7 1 1 1  (1+1) = 10   (0+1) = 01

___

Relações de recorrência

                
 v3 v2 v1 v0  0 -- carry-in (inicial)
  0 a3 a2 a1 a0 +
  0 b3 b2 b1 b0
 ______________
 r4 r3 r2 r1 r0

    supor a existência de uma primeira parcela

  v0 = (a0.b0)
  r0 = (a0^b0)

    a segunda parcela será

  v1 = (a1^b1).v0 + (a1.b1)
  r1 = (a1^b1)^v0

    e a seguinte

  v2 = (a2^b2).v1 + (a2.b2)
  r2 = (a2^b2)^v1

    e assim por diante, para mais bits,
    o que se poderá resumir pela relação de recorrência

  a + b + v   = v r  -- para todos os bits no intervalo [n:0]
   n   n   n-1   n n
                        por definição, o primeiro v   = 0 (carry-in)
                                                   -1
                        e se considerar o último  v   = r (carry-out)
                                                   n     (n+1)
                        resposta = { r   r     r     ... r   }
                                      (n) (n-1) (n-2)     (0)

______________________________________________________________________

02. Subtrator

a.) Subtrator de dois bits 
   ("meia-diferença" ou "meio-subtrator" ou "half difference")

                            diferença       Complemento de 2
n mintermos MAXTERMOS  a b   s1 s0                 (0)
0 ( a'.b' ) ( A +B  )  0-0 =  0  0 ( 0)            0 0
1 ( a'.b  ) ( A +B' )  0-1 =  1  1 (-1)  (-1) 1 1       0 1 (+1)
2 ( a .b' ) ( A'+B  )  1-0 =  0  1 (+1)            1 0
3 ( a .b  ) ( A'+B' )  1-1 =  0  0 ( 0)           (-2)

Por mintermos:
                            (1)
   s1 = m(1)   = SoP(1)   = a'.b

                            (1)    (2)
   s0 = m(1,2) = SoP(1,2) = a'.b + a.b' = a^b

Por MAXTERMOS
                                 (0)    (2)    (3) 
   S1 = M(0,2,3) = PoS(0,2,3) = (A+B).(A'+B).(A'+B')

                                 (0)    (3)
   S0 = M(0,3)   = PoS(0,3)   = (A+B).(A'+B')

___

Ao desenvolver as expressões 

Por MAXTERMOS

          0      2             3
   S1 = (A+B).(A'+B)       .(A'+B')

      = (A.A'+A.B+B.A'+B.B).(A'+B')

      = ( 0  +A.B+A'.B+1.B).(A'+B')

      = (    (A  +A'  +1)B).(A'.B')

      =                  B .(A'+B')

      = B.A' + B.B'   

      = B.A' + 0
      
      = A'.B

   
          0      3
   S0 = (A+B).(A'+B')

      = (A.A'+A.B'+B.A'+B.B')

      = ( 0  +A.B'+A'.B+ 0  )

      =  A.B' + A'.B

      =  A xor B = A ^ B

___
      
Verilog

// definicao por expressao
module HD_e ( output s1, output s0, input a, input b );
  assign s0 =  a ^ b;
  assign s1 = ~a & b;
endmodule

// definicao por portas (gates)
module HD_p ( output s1, output s0, input a, input b );
  wire w1;
  xor XOR_1 ( s0, a , b );
  not NOT_1 ( w1, a );
  and AND_1 ( s1, w1, b );
endmodule

___________________________________________________________________


b.) Subtrator de três bits 
   ("diferença completa" ou "subtrator completo" ou "full difference")

                                diferença
n mintermos  MAXTERMOS   a-b-c  s1 s0
0 (a'.b'.c') (A +B +C )  0 0 0   0  0 ( 0)
1 (a'.b'.c ) (A +B +C')  0 0 1   1  1 (-1)
2 (a'.b .c') (A +B'+C )  0 1 0   1  1 (-1)
3 (a'.b .c ) (A +B'+C')  0 1 1   1  0 (-2)

4 (a .b'.c') (A'+B +C )  1 0 0   0  1 (+1)
5 (a .b'.c ) (A'+B +C')  1 0 1   0  0 ( 0)
6 (a .b .c') (A'+B'+C )  1 1 0   0  0 ( 0)
7 (a .b .c ) (A'+B'+C')  1 1 1   1  1 (-1)

Por mintermos:
                                       (1)      (2)      (3)      (7)
   s1 = m(1,2,3,7) = SoP(1,2,3,7) = a'.b'.c + a'.b.c' + a'.b.c + a.b.c

                                       (1)      (2)      (4)      (7)
   s0 = m(1,2,4,7) = SoP(1,2,4,7) = a'.b'.c + a'.b.c' + a.b'.c'+ a.b.c

Por MAXTERMOS
                                       (0)      (4)      (5)      (6)
   S1 = M(0,4,5,6) = PoS(0,4,5,6) = (A+B+C).(A'+B+C ).(A'+B+C').(A'+B'+C)

                                       (0)      (3)      (5)      (6)
   S0 = M(0,3,5,6) = PoS(0,3,5,6) = (A+B+C).(A+B'+C').(A'+B+C').(A'+B'+C)

___

Ao desenvolver as expressões 

Por mintermos:
            ___________________
           |                   |
   s1 = a'.b'.c + a'.b.c' + a'.b.c + a.b.c
                     |________| |_______|
                     
      = (b'+b).a'.c + (c'+c).a'.b + (a'+a).b.c

      = (  1 ).a'.c + (  1 ).a'.b + (  1 ).b.c

      = a'.c + a'.b + b.c

            ________          ________
           |        |        |        |
   s0 = a'.b'.c + a'.b.c' + a.b'.c'+ a.b.c

      = a'.(b'.c + b.c' ) + a.(b'.c'+ b.c)

      = a'.(    b^c     ) + a.(    b^c   )'

      = a ^(    b^c     ) 

___

Por MAXTERMOS

Produto dos termos para S1

              (A +B+C)  -- M(0)
              (A'+B+C). -- M(4)
_______________________
          A.C+B.C+C.C +
      A.B+B.B+B.C+
A'.A+A'.B+A'.C
_______________________
          A.C+B.C+C.1 +
      A.B+1.B+B.C+
 0  +A'.B+A'.C
_______________________
 A'.C+B.C+A.C+B.C+C.1 +
A.B+1.B+B.C+A'.B
_______________________
   (A'+B+A+B+1+B).C   +
(A+1+A').B
_______________________
         B    +   C         (parcial 1)

___

             (A'+B +C')  -- M(5)
             (A'+B'+C ). -- M(6)
________________________
        A'.C+B.C+C'.C +
   A'.B'+B'.B+B'.C'+
A'.A'+A'.B+A'.C'
_______________________
        A'.C+B.C+  0  +
   A'.B'+ 0 +B'.C'+
A'.1+A'.B+A'.C'
_______________________
A'.1+A'.B+A'.B'+A'.C  +
    B'.C'+B'.C'+B. C
_______________________
A'.(1+ B+ B'+ C)      +
    B'.C'+B.C
_______________________
A'+ B'.C'+B.C               (parcial 2)

___

           B +  C           (parcial 1)
    A'+ B'.C'+B.C           (parcial 2)
______________________________
        B.C.B + B.C.C +
B'.C'.B+B'.C'.C       +
A'.B+A'.C
______________________________
        B.B.C + B.C.1 +
B'.B.C'+B'.C'.C       +
A'.B+A'.C
______________________________
        B.1.C + B.C   +
(B'.B).C'+B'.(C'.C)   +
A'.B+A'.C
______________________________
       (B.C)  +(B.C)  +
   0  . C'+B'.  0     +
A'.B+A'.C
______________________________
        B.C           +
      0   +  0        +
A'.B+A'.C
______________________________
A'.B+A'.C + B.C


S1 = (A+B+C).(A'+B+C).(A'+B+C').(A'+B'+C)

   = (B+C).(A'+B).(A'+C)

   =  A'.B + A'.C + B.C

___

Produto dos termos para S0

             (A+B +C )  -- M(0)
             (A+B'+C'). -- M(3)
_______________________
       A.C'+B.C'+C.C' +
    A.B'+B.B'+B'.C +
A.A+A.B+A.C
_______________________
       A.C'+B.C'+ 0   +
    A.B'+ 0  +B'.C +
A.1+A.B+A.C
_______________________
       B'.C+B.C'      +
A.1+A.B+A.C+A.B'+A.C'
_______________________
       B'.C+B.C'      +
A(1+  B+  C+  B'+  C')
_______________________
A  +   B'.C+ B.C'          (parcial 1)

___

            (A'+B +C')  -- M(5)
            (A'+B'+C ). -- M(6)
_______________________
        A'.C+B.C+C'.C +
  A'.B'+B'.B+B'.C'+
A'.A'+A'.B+A'.C'
_______________________
        A'.C+B.C+  0  +
  A'.B'+  0 +B'.C'+
A'.1+A'.B+A'.C'
_______________________
        B'.C'+B.C     +
        A'.B'+A'.C+
A'.1+A'.B+A'.C'
_______________________
        B'.C'+B.C     +
A'.(1+B+C'+B'+C)
_______________________
A'   + B'C'  + B.C         (parcial 2)

___

A  +   B'.C+ B.C'          (parcial 1)
A' +   B'C'+ B.C           (parcial 2)
______________________________
A.B.C+B'.C.B.C+B.C'.B.C      +
A.B'.C'+B'.C.B'.C'+B'.C'.B.C'+
A'.A+A'.B'.C+A'.B.C'
______________________________
A.B.C+   0    +    0         +
A.B'.C'+ 0    +    0         +
  0    +A'.B'.C+A'.B.C'
______________________________
A.B.C+A.B'.C'+A'.B.C'+A'.B'.C
    ^      ^       ^        ^
    |      |_______|        |
    |_______________________|


(A.B+A'.B').C + (A.B'+A'.B).C'

(A xnor B ).C + (A  xor  B).C'

    K'     .C +      K     .C'

           K xor C

  (A xor B ) xor c

S0 = A xor B xor C = A ^ B ^ C

___

Verilog

// definicao por expressao
module FD_e ( output s1, output s0, input a, input b, input c );
  assign s1 = (~a ^ b) + (~a & c) + ( b & c );
  assign s0 = ( a ^ b) ^ c;
endmodule

// definicao por portas (gates)
module FD_p ( output s1, output s0, input a, input b, input c );
  wire w1, w2, w3, w4, w5, w6;
  xor XOR_1 ( w1, a ,  b );
  xor XOR_2 ( s0, w1,  c );
  not NOT_1 ( w2, a );
  and AND_1 ( w3, w2,  b ); // ~a&b
  and AND_2 ( w4, w2,  c ); // ~a&c
  and AND_3 ( w5, b ,  c ); //  b&c
  and OR__1 ( w6, w3, w4 );
  and OR__2 ( s1, w5, w6 ); 
endmodule

___

Resumo

  Equações características para mintermos

    Forma completa (ou canônica):

    v = s1 = m(1)   = SoP(1)   = a'.b

    r = s0 = m(1,2) = SoP(1,2) = a'.b + a.b' = a^b

    Forma compacta (soma de produtos):
    
    v  = SoP(1,2,3,7) = a'.c + a'.b + b.c
  
    r  = SoP(1,2,4,7) = a ^ b ^ c

  Equações características para MAXTERMOS

    Forma completa (ou canônica):
                                           (0)      (4)      (5)      (6)
    V = S1 = M(0,4,5,6) = PoS(0,4,5,6) = (A+B+C).(A'+B+C ).(A'+B+C').(A'+B'+C)

                                           (0)      (3)      (5)      (6)
    R = S0 = M(0,3,5,6) = PoS(0,3,5,6) = (A+B+C).(A+B'+C').(A'+B+C').(A'+B'+C)
 
    Forma compacta (produto de somas):

    V  = PoS {0,1,2,4} = A'.B + A'.C + B.C

    R  = PoS {0,3,5,6} = A ^ B ^ C

______________________________________________________________________

                            Resumo                            
                                                              
                            Adição              Subtração     
                       a+b+v0 = [v1 r]      a-b-v0 = [v1 r]   
     a  b   vai-um   | vai-um   resultado | vem-um   resultado
           anterior  | próximo            | próximo      C2     
   ------------------|--------------------|-------------------
0 |  0  0  0         |       0  0  ( 0)   |       0  0  ( 0)  
1 |  0  0  1         |       0  1  ( 1)   |       1  1  (-1)  
2 |  0  1  0         |       0  1  ( 1)   |       1  1  (-1)  
3 |  0  1  1         |       1  0  ( 2)   |       1  0  (-2)  
4 |  1  0  0         |       0  1  ( 1)   |       0  1  (+1)  
5 |  1  0  1         |       1  0  ( 2)   |       0  0  ( 0)  
6 |  1  1  0         |       1  0  ( 2)   |       0  0  ( 0)  
7 |  1  1  1         |       1  1  ( 3)   |       1  1  (-1)  
  |------------------|--------------------|-------------------
  |------------------|--------------------|-------------------
  |                  |                    |                   
  |                  | v1 = {3,5,6,7}     | v1 = {1,2,3,7}    
  |     SoP = 1      |                    |                   
  |                  | r  = {1,2,4,7}     | r  = {1,2,4,7}    
  |                  |                    |                   
  |------------------|--------------------|-------------------
  |------------------|--------------------|-------------------
  |                  |                    |                   
  |                  | V1 = {0,1,2,4}     | V1 = {0,4,5,6}    
  |     PoS = 0      |                    |                   
  |                  | R  = {0,3,5,6}     | R  = {0,3,5,6}    
  |                  |                    |                   


___



  