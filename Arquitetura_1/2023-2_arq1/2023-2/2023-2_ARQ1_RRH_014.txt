PUC-Minas - ICEI - Ciência da Computação
Arquitetura de Computadores I - Aula 2023-2_014

Anotações
___

Modelo de arquitetura de computador

 Unidade  Central           Barramentos       Memória
 de Processamento   Endereço  Controle  Dados

                           |     |     |             
       _____               |     |     |       _____ 
      |     |<=============|=====#=====|=====>|     |
      | PC  |<------------>+-----|-----+----->| MAR |
      |_____|  palavra de  |     |     |      |_____|
       __|__ controle (PCW)|     |     |       __|__ 
      |DCD  |==============|====>#=====|=====>|     |
      |  /  |------------->|     |     |      | MEM |
      |  TMP|-_-_-_-_-_-_-_|-_-_>|     |      |     |
      |_____| temporização |     |     |      |_____|
       __|__               |     |     |       __|__ 
      |     |<=============|=====#=====|=====>|     |
      | IR  |<-------------|-----|-----+<---->| MDR |
      |_____|------------->+---->|     |      |_____|
                           |     |     |             
       _____               |     |     |       _____ 
      |     |<=============|=====#=====|=====>|     |
      | R1  |<-------------|-----|-----+<-----| IN  |<----
      |_____|    _____     |     |     |      |_____|
         |      |     |<===|=====#     |            entradas
         |      | R2  |<---|-----|-----+            
         |      |_____|    |     |     |       _____ 
         |         |       |     #=====|=====>|     |<----
         |         |       |     |     |sinais| DDR |<.=.>
         +   +-----+       |     #<=.=.|=.=.=>|_____|---->
          \ /              |     |     |             
         __v__             |     |     |       _____ saídas 
        | +   |<===========|=====#=====|=====>|     |
        |  /  |<-----------|-----+     +----->| OUT |---->
        |   = |            |     |     |      |_____|
        |_____|  _____     |     |     |             
          | |   |flags|<===|=====#     |             
          | +-->|CMOPZ|----|---->|     |             
         _v___  |_____|    |     |     |             
        |     |<===========|=====#     |             
        | AC  |<-----------|-----|-----+             
        |_____|------------|-----|---->+             
                           |     |     |                 
    Unidade Lógica e       |     |     |  Interfaces  com
      Aritmética           |     |     |    Periféricos   

___

 Unidade Central de Processamento
 
 Unidade de Controle

 PC    = Program Counter ou Instruction Pointer (IP)
         contém o endereço da instrução que será executada

 IR    = Instruction Register
         contém cópia da instrução que será executada

 DCD   = Instruction Decoder
         contém a lógica para decodificação de instruções

 TMP   = Timer
         contém os elementos para tratar os sinais de temporização

___
         
 Unidade Lógica e Aritmética

 AC    = Accumulator
         contém resultado de operação;
         também poderá conter dado, antes da operação

 R1    = Registrador auxiliar 1
         contém dado para ser operado

 R2    = Registrador auxiliar 2
         contém outro dado para ser operado

 +/=   = Operadores aritméticos, relacionais e lógicos
         contém a lógica para realização de operações

 flags = códigos indicadores de condições 
         estabelecidas (Carry, Minus, Overflow, Plus, Zero)

___

 Memória
  
 MEM   = Memory Storage
         contém instruções e dados armazenados

 MAR   = Memory Address Register
         contém o endereço de posição da memória a ser usada

 MDR   = Memory Data Register
         contém o valor de posição da memória lida,
         ou o valor a ser gravado na posição de memória

___

 Periféricos

 DDR   = Device Drivers
         contém dados para controle dos dispositivos de entrada e saída

 IN    = Input  Register
         contém dado de   um dispositivo de entrada

 OUT   = Output Register 
         contém dado para um dispositivo de saída

___
 
Processamento

Ciclo de instrução

Simplificado

            +===========================================+    
            |                                           |     
            v                                           |     
          buscar =============> decodificar ========> executar
          (fetch)                (decode)            (execute)
            (1)                    (2)                 (3)


Com detalhamento

         / desvio <---------------------------------------------------------+
     PC < endereço                                                          |
         \ inicial                                                    flags |
    MAR <- PC                      opcode                  AC  <----+ CMOZ  |
    MDR <- MEM [MAR]             /                       /    \     | ///   |
     IR <- MDR      --------> IR                regs    <  R1  > operação --+
                    instrução    \            /          \    / /   |
                                  operando(s) - imediatos  R2  /    |
                                              \           /         |
                                                MEM [MAR]  <--------+

    1. Buscar instrução      (fetch)
    1.1 ao iniciar o ciclo
        MAR <- PC         // apontador de instrução (PC) 
                          // indicará o endereço da instrução 
                          // na memória (MAR)
    1.2 MDR <- MEM [MAR]  // conteúdo da memória (instrução)
                          // estará disponível (MDR)
    1.3 IR  <- MDR        // registrador de instrução (IR)
                          // receberá cópia da instrução
    1.4 PC  <- PC+x       // atualizar o apontador de instrução
                          // para a próxima (ver observação abaixo)
                          // dependendo do tamanho da instrução (x)
                          
    2. Decodificar instrução (decode)
    2.1 opcode            // código da operação
    2.2 operando(s)       // se a operação necessitar operando(s),
                          // identificar cada operando 
                          // (imediato, registrador, memória ...)
                          // e proceder o carregamento de conteúdo,
                          // buscando na memória, se necessário        

    3. Executar instrução    (execute)
    3.1 obter resultado   // em caso de operações 
                          // aritméticas ou lógicas
    3.2 atualizar flags   // estabelecer códigos de condição 
                          // compatíveis com a operação
    3.3 PC <- desvio      // se necessário,
                          // dependente de flag (condicional),
                          // ou não (desvio incondicional)
                          // OBS.: Nesse caso, a próxima instrução
                          //       a ser executada não será a seguinte
                          //       (PC+x), conforme já preparada
                          //       na etapa de busca (fetch).
___

Papel dos registradores

   +--------------------------------------------------------------+      
   | atualizar                               chamada  /   desvio  |      
   |      +------->  opcode ---------------+                      |      
   v     /                   registradores |                      |      
  PC  IR  instrução            +-AC  <-----|----------------------|----+ 
   |  ^  \                    /  ^   \     v                      |    | 
   |  |   +-------> operandos<   |    > operação --> resultado + flags | 
   |  |                 |     \  |   /                |                | 
   |  |      +----------+      +-|AUX                 |                | 
   v  |      |                   |^                   v                | 
  buscar ====|===> decodificar ==||===> executar ==> acessar ==> reescrever
   |  |      |                   ||                  memória    (writeback)     
   |  +------|-------------------+|                   |  |             
   |         |                   ||                   |  |             
   |          >-> MAR -> MEM <=> MDR <----------------+  |             
   |         |                                           |             
   +-------->+<------------------------------------------+             


___

Mapeamento da memória para execução de programas

 _____________
|             |
|     S.O.    |                   environment variables
|             |                   command line arguments
|_____________| <- área dinâmica
|    Stack    |                   SS - Stack Segment
|             |
|  (métodos)  |
|             |
|-------------|
|      |      |
|      v      |
| Área Livre  |
|      ^      |
|      |      |
|-------------|                   ES - Extra Segment
|    Heap     |
|             |
|   (dados)   |
|             |
|=============| <- execução
|             | <- área estática
|    Dados    |
|     Não     |
|Inicializados|
|             |
|-------------|                   DS - Data Segment
|             |
|    Dados    | 
|Inicializados|
|             |
|-------------|
|             |
| Constantes  |
|             |
|-------------|
|             |
|   Código    |
|             |
|=============| <- programa       BS - Base Segment
|             |
|   Drivers   |
|             |
|-------------|
|             |
|    BIOS     |
|_____________|

   
___

